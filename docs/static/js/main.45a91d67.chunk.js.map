{"version":3,"sources":["Alumnos.js","reportWebVitals.js","index.js"],"names":["validationSchema","yup","numeroControl","trim","matches","max","required","curp","nombre","primerApellido","email","useStyles","makeStyles","theme","appBar","position","layout","width","marginLeft","spacing","marginRight","breakpoints","up","paper","marginTop","marginBottom","padding","stepper","buttons","display","justifyContent","button","AlumnosScreen","src","useRef","classes","React","useState","open","setOpen","formik","useFormik","initialValues","fechaNacimiento","Date","onSubmit","values","current","innerText","JSON","stringify","console","log","CssBaseline","className","Collapse","in","Alert","ref","action","IconButton","aria-label","color","size","onClick","fontSize","Paper","Typography","component","variant","align","Fragment","handleSubmit","Grid","container","item","xs","TextField","id","name","label","value","onChange","handleChange","error","touched","Boolean","errors","helperText","fullWidth","autoComplete","sm","utils","DateFnsUtils","margin","format","val","setFieldValue","KeyboardButtonProps","disableToolbar","Button","startIcon","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.45a91d67.chunk.js","sourcesContent":["import React, { useRef } from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Link from '@material-ui/core/Link';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Paper from '@material-ui/core/Paper';\nimport { useFormik } from 'formik';\nimport { Alert, AlertTitle } from '@material-ui/lab';\nimport Collapse from '@material-ui/core/Collapse';\nimport IconButton from '@material-ui/core/IconButton';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Icon from '@material-ui/core/Icon';\nimport SaveIcon from '@material-ui/icons/Save';\n\nimport * as yup from 'yup';\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport {\n    KeyboardDatePicker\n} from '@material-ui/pickers';\nimport { MuiPickersUtilsProvider } from '@material-ui/pickers';\n\nconst validationSchema = yup.object({\n    numeroControl: yup\n        .string()\n        .trim()\n        .matches(/^[A-Z0-9]*$/, 'Sólo se aceptan números y letras.')\n        .max(15, 'El campo solo puede ser máximo 15 números o letras.')\n        .required(),\n    curp: yup\n        .string()\n        .trim()\n        .matches(/^([A-Z][AEIOUX][A-Z]{2}\\d{2}(?:0[1-9]|1[0-2])(?:0[1-9]|[12]\\d|3[01])[HM](?:AS|B[CS]|C[CLMSH]|D[FG]|G[TR]|HG|JC|M[CNS]|N[ETL]|OC|PL|Q[TR]|S[PLR]|T[CSL]|VZ|YN|ZS)[B-DF-HJ-NP-TV-Z]{3}[A-Z\\d])(\\d)$/, 'El formato del CURP es inválido.')\n        .max(18)\n        .required(),\n    nombre: yup\n        .string()\n        .trim()\n        .matches(/^[A-ZÑ]+(?: [A-ZÑ]+)*$/, 'Solo letras sin acento y mayusculas.')\n        .required(),\n    primerApellido: yup\n        .string()\n        .trim()\n        .matches(/^[A-ZÑ]+(?: [A-ZÑ]+)*$/, 'Solo letras sin acento y mayusculas.')\n        .required(),\n    email: yup\n        .string()\n        .trim()\n        .email('Por favor, escriba una dirección de correo válida.')\n        .required()\n});\n\n\nfunction Copyright() {\n    return (\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            {'Copyright © '}\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n                Your Website\n        </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n        </Typography>\n    );\n}\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n    },\n    layout: {\n        width: 'auto',\n        marginLeft: theme.spacing(2),\n        marginRight: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n            width: 600,\n            marginLeft: 'auto',\n            marginRight: 'auto',\n        },\n    },\n    paper: {\n        marginTop: theme.spacing(3),\n        marginBottom: theme.spacing(3),\n        padding: theme.spacing(2),\n        [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n            marginTop: theme.spacing(6),\n            marginBottom: theme.spacing(6),\n            padding: theme.spacing(3),\n        },\n    },\n    stepper: {\n        padding: theme.spacing(3, 0, 5),\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1),\n    },\n}));\nexport const AlumnosScreen = () => {\n    //this.alert = React.createRef();\n    const src = useRef(null);\n\n    const classes = useStyles();\n    const [open, setOpen] = React.useState(false);\n\n    const formik = useFormik({\n        initialValues: {\n            numeroControl: '',\n            curp: '',\n            nombre: \"\",\n            primerApellido: \"\",\n            email: '',\n            fechaNacimiento: new Date()\n        },\n        validationSchema: validationSchema,\n        onSubmit: (values) => {\n            setOpen(true);\n            src.current.innerText = JSON.stringify(values, null, 2);\n            console.log(src);\n\n\n            //alert(JSON.stringify(values, null, 2));\n        },\n    });\n    //const dispatch = useDispatch();\n    //const { loading } = useSelector(state => state.alumnos);\n\n    // useEffect(() => {\n\n    //     dispatch(startLoadingAlumnos());\n\n\n\n    // }, [dispatch])\n\n\n    const handleClickNew = () => {\n        //dispatch(uiOpenModal())\n    }\n\n\n    return (\n\n\n        <>\n\n            <CssBaseline />\n\n            <main className={classes.layout}>\n                <Collapse in={open}>\n                    <Alert\n                        ref={src}\n                        action={\n                            <IconButton\n                                aria-label=\"close\"\n                                color=\"inherit\"\n                                size=\"small\"\n                                onClick={() => {\n                                    setOpen(false);\n                                }}\n                            >\n                                <CloseIcon fontSize=\"inherit\" />\n                            </IconButton>\n                        }\n                    >\n                        Close me!\n        </Alert>\n                </Collapse>\n                <Paper className={classes.paper}>\n                    <Typography component=\"h1\" variant=\"h4\" align=\"center\">\n                        Agregar nuevo alumno\n          </Typography>\n\n                    <React.Fragment>\n                        {/* <form onSubmit={handleSubmit(onSubmit)} className={classes.container}> */}\n                        <form onSubmit={formik.handleSubmit}>\n\n                            <Grid container spacing={3}>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        id=\"numeroControl\"\n                                        name=\"numeroControl\"\n                                        label=\"No. Control\"\n                                        value={formik.values.numeroControl}\n                                        onChange={formik.handleChange}\n                                        error={formik.touched.numeroControl && Boolean(formik.errors.numeroControl)}\n                                        helperText={formik.touched.numeroControl && formik.errors.numeroControl}\n                                        fullWidth\n                                        autoComplete=\"given-name\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        id=\"curp\"\n                                        name=\"curp\"\n                                        label=\"CURP\"\n                                        value={formik.values.curp}\n                                        onChange={formik.handleChange}\n                                        error={formik.touched.curp && Boolean(formik.errors.curp)}\n                                        helperText={formik.touched.curp && formik.errors.curp}\n                                        fullWidth\n                                        autoComplete=\"family-name\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        required\n                                        id=\"nombre\"\n                                        name=\"nombre\"\n                                        label=\"Nombre\"\n                                        value={formik.values.nombre}\n                                        onChange={formik.handleChange}\n                                        error={formik.touched.nombre && Boolean(formik.errors.nombre)}\n                                        helperText={formik.touched.nombre && formik.errors.nombre}\n                                        fullWidth\n                                        autoComplete=\"family-name\"\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        required\n                                        id=\"primerApellido\"\n                                        name=\"primerApellido\"\n                                        label=\"Primer Apellido\"\n                                        fullWidth\n                                        value={formik.values.primerApellido}\n                                        onChange={formik.handleChange}\n                                        error={formik.touched.primerApellido && Boolean(formik.errors.primerApellido)}\n                                        helperText={formik.touched.primerApellido && formik.errors.primerApellido}\n                                    />\n                                </Grid>\n\n                                <Grid item xs={12}>\n                                    <TextField\n                                        required\n                                        fullWidth\n                                        id=\"email\"\n                                        name=\"email\"\n                                        label=\"Email\"\n                                        value={formik.values.email}\n                                        onChange={formik.handleChange}\n                                        helperText={formik.touched.email ? formik.errors.email : \"\"}\n                                        error={Boolean(formik.errors.email)}\n                                    />\n                                </Grid>\n\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                    <Grid item xs={12}>\n                                        <KeyboardDatePicker\n                                            margin=\"normal\"\n                                            id=\"date-picker-dialog\"\n                                            label=\"Date picker dialog\"\n                                            format=\"MM/dd/yyyy\"\n                                            value={formik.values.fechaNacimiento}\n                                            onChange={val => {\n                                                formik.setFieldValue(\"fechaNacimiento\", val);\n                                            }}\n                                            KeyboardButtonProps={{\n                                                'aria-label': 'change date',\n                                            }}\n                                        />\n                                    </Grid>\n                                </MuiPickersUtilsProvider>\n\n                                <MuiPickersUtilsProvider utils={DateFnsUtils}>\n                                    <Grid item xs={12}>\n\n                                        <KeyboardDatePicker\n                                            disableToolbar\n                                            variant=\"inline\"\n                                            format=\"m/d/Y\"\n                                            margin=\"normal\"\n                                            id=\"date-picker-inline\"\n                                            label=\"Date picker inline\"\n                                            value={formik.values.fechaNacimiento}\n                                            onChange={val => {\n                                                formik.setFieldValue(\"fechaNacimiento\", val);\n                                            }}\n                                            KeyboardButtonProps={{\n                                                'aria-label': 'change date',\n                                            }}\n                                        />\n                                    </Grid>\n                                </MuiPickersUtilsProvider>\n\n\n\n                            </Grid>\n                            {/* <Button onClick={formik.handleSubmit}\n\n                                type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\n                                Guardar\n                            </Button> */}\n                            {/* <Button\n                                onClick={formik.handleSubmit}\n                                fullWidth\n                                variant=\"contained\"\n                                color=\"primary\"\n                                className={classes.button}\n                                endIcon={<Icon>send</Icon>}\n                            >\n                                Send\n                            </Button> */}\n                            <Button\n                            fullWidth\n                            onClick={formik.handleSubmit}\n\n                                variant=\"contained\"\n                                color=\"primary\"\n                                size=\"large\"\n                                className={classes.button}\n                                startIcon={<SaveIcon />}\n                            >\n                                Save\n      </Button>\n                        </form>\n                    </React.Fragment>\n                </Paper>\n            </main>\n        </>\n    )\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {AlumnosScreen} from \"./Alumnos\"\n//import App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlumnosScreen />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}